package AMR_sys
public
	-- Sistema do AMR 
	system AMRSystem
	end AMRSystem;
	system implementation AMRSystem.impl
		subcomponents
			my_lidar_sensor: device LidarSensor;
			my_wheels_actuator: device WheelsActuator;
			my_controller: process Controller.impl;
			my_bus: bus HWConnection.impl;
			my_processor: processor MainProcessor.impl;
			
		connections
			lidar_conn: port my_lidar_sensor.obstacle_data -> my_controller.obstacle_in;
			wheels_conn: port my_controller.wheels_out -> my_wheels_actuator.wheels_cmd;
			
			bus_lidar: bus access my_bus -> my_lidar_sensor.bus_access;
			bus_wheels: bus access my_bus -> my_wheels_actuator.bus_access;
			bus_processor: bus access my_bus -> my_processor.bus_access;
		properties 
			Allowed_Processor_Binding => (reference(my_processor))
				applies to my_controller;
			Allowed_Processor_Binding => (reference(my_processor))
				applies to my_controller.my_thread_controler;
			Allowed_Processor_Binding => (reference(my_processor))
				applies to my_controller.my_thread_lidar;
			Allowed_Processor_Binding => (reference(my_processor))
				applies to my_controller.my_thread_wheels;
	end AMRSystem.impl;
	
	-- Sensor Lidar
	device LidarSensor
		features 
			obstacle_data: out data port;
			bus_access: requires bus access HWConnection;
	end LidarSensor;
	device implementation LidarSensor.impl
	end LidarSensor.impl;
	
	-- Atuadores rodas
	device WheelsActuator
		features 
			wheels_cmd: in data port;
			bus_access: requires bus access HWConnection;
	end WheelsActuator;
	device implementation WheelsActuator.impl
	end WheelsActuator.impl;
	
	-- Processador e memória
	processor MainProcessor
			features 
				bus_access: requires bus access HWConnection;
	end MainProcessor;
	processor implementation MainProcessor.impl
			subcomponents
				my_ram: memory Ram;
	end MainProcessor.impl;
	memory Ram
	end Ram;
	
	-- Barramento de comunicação
	bus HWConnection
	end HWConnection;
	bus implementation HWConnection.impl
	end HWConnection.impl;
	
	-- Processo de controle do dispositivo
	process Controller
		features
			obstacle_in: in data port;
			wheels_out: out data port;
	end Controller;
	process implementation Controller.impl
		subcomponents
			my_thread_lidar: thread ReadLidar;
			my_thread_wheels: thread ActuateWheels;
			my_thread_controler: thread ControlRules;
		connections 
			lidar_thread_conn: port obstacle_in -> my_thread_lidar.lidar_therad_in;
			lidar_control_thread_conn: port my_thread_lidar.lidar_therad_out -> my_thread_controler.controler_therad_in;
			control_wheels_thread_conn: port my_thread_controler.controler_therad_out -> my_thread_wheels.wheels_thread_in;
			wheel_thread_conn: port my_thread_wheels.wheels_thread_out -> wheels_out;
	end Controller.impl;
	
	-- Threads 
	thread ReadLidar
		features
			lidar_therad_in: in data port;
			lidar_therad_out: out data port;
		properties 
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 1 ms .. 2 ms;
			Period => 10 ms;
	end ReadLidar;
	thread implementation ReadLidar.impl
	end ReadLidar.impl;
	
	thread ActuateWheels
		features
			wheels_thread_in: in data port;
			wheels_thread_out: out data port;
		properties 
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 4 ms;
			Period => 30 ms;
	end ActuateWheels;
	thread implementation ActuateWheels.impl
	end ActuateWheels.impl;
	
	thread ControlRules
		features
			controler_therad_in: in data port;
			controler_therad_out: out data port;
		properties 
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 3 ms .. 5 ms;
			Period => 50 ms;
	end ControlRules;
	thread implementation ControlRules.impl
	end ControlRules.impl;
	
	
end AMR_sys;


























